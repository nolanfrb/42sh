name: Build and Test Pipeline

on:
  push:
    branches:
      - 'main'
  pull_request:
    branches-ignore:
      - 'ga-ignore-*'

env:
  MIRROR_URL: "git@github.com:EpitechPGEPromo2029/B-PSU-200-NAN-2-1-42sh-nolan.fribault.git"
  EXECUTABLES: "42sh"
  GCOV_PREFIX: build_${{ github.run_id }}
  GCOV_PREFIX_STRIP: 1

jobs:
  is_mirror_repo:
    name: Check if repository is a mirror
    runs-on: ubuntu-latest
    outputs:
      is_mirror: ${{ steps.is_mirror_repo.outputs.is_mirror }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - id: is_mirror_repo
        run: |
          REPO_PATH=$(echo "${{ github.repositoryUrl }}" | sed -E 's|^git://github.com/(.+)\.git$|\1|')
          MIRROR_PATH=$(echo "${{ env.MIRROR_URL }}" | sed -E 's|^git@github.com:(.+)\.git$|\1|')
          
          if [[ "$REPO_PATH" == "$MIRROR_PATH" ]]; then
            echo "is_mirror=true" >> $GITHUB_OUTPUT
          else
            echo "is_mirror=false" >> $GITHUB_OUTPUT
          fi

  check_coding_style:
    name: Check Coding Style
    runs-on: ubuntu-latest
    needs: is_mirror_repo
    if: ${{ needs.is_mirror_repo.outputs.is_mirror == 'false' }}
    container:
      image: ghcr.io/epitech/coding-style-checker:latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run coding style checker
        run: check.sh $(pwd) $(pwd)

      - name: Log report to summary
        run: |
          LOG_FILE="$(pwd)/coding-style-reports.log"
          if [ -s "$LOG_FILE" ]; then
            echo "### Coding Style Checker Report 🚀" >> $GITHUB_STEP_SUMMARY
            echo "| Total Errors 🚨 | Major Errors ❗ | Minor Errors ⚠️ | Info Messages ℹ️ |" >> $GITHUB_STEP_SUMMARY
            echo "|-----------------|-----------------|------------------|------------------|" >> $GITHUB_STEP_SUMMARY
            echo "| **Total:** $(wc -l < "$LOG_FILE") | **Major:** $(grep -c ": MAJOR:" "$LOG_FILE") | **Minor:** $(grep -c ": MINOR:" "$LOG_FILE") | **Info:** $(grep -c ": INFO:" "$LOG_FILE") |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "$(cat "$LOG_FILE")" >> $GITHUB_STEP_SUMMARY
          else
            echo "No coding style issues found. ✔️ " >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check Coding Style Output
        run: |
          LOG_FILE="$(pwd)/coding-style-reports.log"
          if [ -s "$LOG_FILE" ]; then
              while IFS=':' read -r file line type error; do
                  file="${file#./}"
                  echo "::error file=$file,line=$line,title=$type::$error"
              done < "$LOG_FILE"
              exit 1
          else
              echo "No coding style errors detected"
          fi

  check_program_compilation:
    name: Check Program Compilation
    runs-on: ubuntu-latest
    needs: [is_mirror_repo, check_coding_style]
    container: epitechcontent/epitest-docker:latest
    if: ${{ needs.is_mirror_repo.outputs.is_mirror == 'false' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Compile project
        run: make
        timeout-minutes: 2

      - name: Clean project
        run: make clean

      - name: Check executables exist and are executable
        run: |
            if [ -n "${{ env.EXECUTABLES }}" ] && [ "${{ env.EXECUTABLES }}" != "" ]; then
              for executable in $(echo ${{ env.EXECUTABLES }} | tr "," "\n"); do
                  if [ ! -f "$executable" ]; then
                      echo "::error file=$executable::Executable $executable not found"
                      exit 1
                  fi
                  if [ ! -x "$executable" ]; then
                      echo "::error file=$executable::File $executable is not executable"
                      exit 1
                  fi
              done
            fi

  run_tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: [is_mirror_repo, check_program_compilation]
    container: epitechcontent/epitest-docker:latest
    if: ${{ needs.is_mirror_repo.outputs.is_mirror == 'false' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run tests
        run: make tests_run
        timeout-minutes: 2

  push_to_mirror:
    name: Push to Mirror Repository
    runs-on: ubuntu-latest
    needs: [is_mirror_repo, run_tests]
    if: ${{ github.event_name == 'push' && needs.is_mirror_repo.outputs.is_mirror == 'false' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Push to mirror
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url:
            ${{ env.MIRROR_URL }}
          ssh_private_key:
            ${{ secrets.GIT_SSH_PRIVATE_KEY }}